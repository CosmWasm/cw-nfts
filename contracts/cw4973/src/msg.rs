use cosmwasm_schema::cw_serde;
use crate::state::PermitSignature;

#[cw_serde]
pub struct InstantiateMsg {
    pub name: String,
    pub symbol: String,
    pub minter: String,
}

#[cw_serde]
pub enum ExecuteMsg {
    /// @notice Creates and transfers the ownership of an ABT from the 
    /// transaction's `info.sender` to address `to`. 
    /// @dev Throws unless the `signature` represents a Signature created 
    /// by Interface OfflineAminoSigner of the message data structure from 
    /// Interface StdSignDoc: "Agreement(address active,address passive,string tokenURI)" 
    /// expressing address `to`'s explicit agreement to be publicly associated 
    /// with `info.sender` and string `tokenURI`. A unique `token_id` must be generated 
    /// by type-casting the `Vec<u8>` hash value of Interface StdSignDoc structured data 
    /// to `hex`. A successful execution will emit the event:
    /// {
    ///     "action": "mint",
    ///     "minter": info.sender,
    ///     "owner": to,
    ///     "token_id": token_id
    /// }
    /// Once an ABT exists as an hex `token_id` in the contract, function `give(...)` must throw.
    /// @param to: The receiver of the ABT.
    /// @param uri: A distinct Uniform Resource Identifier (URI) for a given ABT.
    /// @param signature: A signature created by Interface OfflineAminoSigner on the message 
    /// data structure from Interface StdSignDoc signed by address `to`.
    /// @return A unique hex `token_id` generated by type-casting the `Vec<u8>` hash 
    /// value of Interface StdSignDoc structured data.
    Give{
        to: String,
        uri: String,
        signature: PermitSignature,
    },

    /// @notice Creates and transfers the ownership of an ABT from an address `from` 
    /// to the transaction's `info.sender`. 
    /// @dev Throws unless the `signature` represents a Signature created by 
    /// Interface OfflineAminoSigner of the message data structure from Interface StdSignDoc
    /// "Agreement(address active,address passive,string tokenURI)" expressing address 
    /// `from`'s explicit agreement to be publicly associated with `info.sender` 
    /// and string `tokenURI`. A unique `token_id` must be generated by type-casting 
    /// the `Vec<u8>` hash value of Interface StdSignDoc structured data to `hex`. 
    /// A successful execution will emit the event:
    /// {
    ///     "action": "mint",
    ///     "minter": info.sender,
    ///     "owner": info.sender,
    ///     "token_id": token_id
    /// }
    /// Once an ABT exists as an hex `token_id` in the contract, function `give(...)` must throw.
    /// @param from: The origin of the AB.
    /// @param uri: A distinct Uniform Resource Identifier (URI) for a given ABT.
    /// @param signature: A signature created by Interface OfflineAminoSigner on the message
    /// data structure from Interface StdSignDoc signed by address `from`.
    /// @return A unique hex `token_id` generated by type-casting the `Vec<u8>` hash
    /// value of Interface StdSignDoc structured data.
    Take{
        from: String,
        uri: String,
        signature: PermitSignature,
    },

    /// @notice Removes the `String token_id` from an account.
    /// @dev A event will be emitted:
    /// {
    ///     "action": "unequip",
    ///     "token_id": token_id,
    ///     "owner": info.sender
    /// }
    /// @param token_id The identifier for an ABT.
    Unequip{ token_id: String },
}